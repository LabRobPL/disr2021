// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/proto/matlab_rpc.proto

#ifndef PROTOBUF_common_2fproto_2fmatlab_5frpc_2eproto__INCLUDED
#define PROTOBUF_common_2fproto_2fmatlab_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace drake {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2fproto_2fmatlab_5frpc_2eproto();
void protobuf_AssignDesc_common_2fproto_2fmatlab_5frpc_2eproto();
void protobuf_ShutdownFile_common_2fproto_2fmatlab_5frpc_2eproto();

class MatlabArray;
class MatlabRPC;

enum MatlabArray_ArrayType {
  MatlabArray_ArrayType_REMOTE_VARIABLE_REFERENCE = 0,
  MatlabArray_ArrayType_DOUBLE = 1,
  MatlabArray_ArrayType_CHAR = 2,
  MatlabArray_ArrayType_LOGICAL = 3,
  MatlabArray_ArrayType_INT = 4
};
bool MatlabArray_ArrayType_IsValid(int value);
const MatlabArray_ArrayType MatlabArray_ArrayType_ArrayType_MIN = MatlabArray_ArrayType_REMOTE_VARIABLE_REFERENCE;
const MatlabArray_ArrayType MatlabArray_ArrayType_ArrayType_MAX = MatlabArray_ArrayType_INT;
const int MatlabArray_ArrayType_ArrayType_ARRAYSIZE = MatlabArray_ArrayType_ArrayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatlabArray_ArrayType_descriptor();
inline const ::std::string& MatlabArray_ArrayType_Name(MatlabArray_ArrayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatlabArray_ArrayType_descriptor(), value);
}
inline bool MatlabArray_ArrayType_Parse(
    const ::std::string& name, MatlabArray_ArrayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatlabArray_ArrayType>(
    MatlabArray_ArrayType_descriptor(), name, value);
}
enum MatlabArray_ShapeType {
  MatlabArray_ShapeType_MATRIX = 0,
  MatlabArray_ShapeType_VECTOR = 1,
  MatlabArray_ShapeType_SCALAR = 2
};
bool MatlabArray_ShapeType_IsValid(int value);
const MatlabArray_ShapeType MatlabArray_ShapeType_ShapeType_MIN = MatlabArray_ShapeType_MATRIX;
const MatlabArray_ShapeType MatlabArray_ShapeType_ShapeType_MAX = MatlabArray_ShapeType_SCALAR;
const int MatlabArray_ShapeType_ShapeType_ARRAYSIZE = MatlabArray_ShapeType_ShapeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatlabArray_ShapeType_descriptor();
inline const ::std::string& MatlabArray_ShapeType_Name(MatlabArray_ShapeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatlabArray_ShapeType_descriptor(), value);
}
inline bool MatlabArray_ShapeType_Parse(
    const ::std::string& name, MatlabArray_ShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatlabArray_ShapeType>(
    MatlabArray_ShapeType_descriptor(), name, value);
}
// ===================================================================

class MatlabArray : public ::google::protobuf::Message {
 public:
  MatlabArray();
  virtual ~MatlabArray();

  MatlabArray(const MatlabArray& from);

  inline MatlabArray& operator=(const MatlabArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatlabArray& default_instance();

  void Swap(MatlabArray* other);

  // implements Message ----------------------------------------------

  MatlabArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatlabArray& from);
  void MergeFrom(const MatlabArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MatlabArray_ArrayType ArrayType;
  static const ArrayType REMOTE_VARIABLE_REFERENCE = MatlabArray_ArrayType_REMOTE_VARIABLE_REFERENCE;
  static const ArrayType DOUBLE = MatlabArray_ArrayType_DOUBLE;
  static const ArrayType CHAR = MatlabArray_ArrayType_CHAR;
  static const ArrayType LOGICAL = MatlabArray_ArrayType_LOGICAL;
  static const ArrayType INT = MatlabArray_ArrayType_INT;
  static inline bool ArrayType_IsValid(int value) {
    return MatlabArray_ArrayType_IsValid(value);
  }
  static const ArrayType ArrayType_MIN =
    MatlabArray_ArrayType_ArrayType_MIN;
  static const ArrayType ArrayType_MAX =
    MatlabArray_ArrayType_ArrayType_MAX;
  static const int ArrayType_ARRAYSIZE =
    MatlabArray_ArrayType_ArrayType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ArrayType_descriptor() {
    return MatlabArray_ArrayType_descriptor();
  }
  static inline const ::std::string& ArrayType_Name(ArrayType value) {
    return MatlabArray_ArrayType_Name(value);
  }
  static inline bool ArrayType_Parse(const ::std::string& name,
      ArrayType* value) {
    return MatlabArray_ArrayType_Parse(name, value);
  }

  typedef MatlabArray_ShapeType ShapeType;
  static const ShapeType MATRIX = MatlabArray_ShapeType_MATRIX;
  static const ShapeType VECTOR = MatlabArray_ShapeType_VECTOR;
  static const ShapeType SCALAR = MatlabArray_ShapeType_SCALAR;
  static inline bool ShapeType_IsValid(int value) {
    return MatlabArray_ShapeType_IsValid(value);
  }
  static const ShapeType ShapeType_MIN =
    MatlabArray_ShapeType_ShapeType_MIN;
  static const ShapeType ShapeType_MAX =
    MatlabArray_ShapeType_ShapeType_MAX;
  static const int ShapeType_ARRAYSIZE =
    MatlabArray_ShapeType_ShapeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShapeType_descriptor() {
    return MatlabArray_ShapeType_descriptor();
  }
  static inline const ::std::string& ShapeType_Name(ShapeType value) {
    return MatlabArray_ShapeType_Name(value);
  }
  static inline bool ShapeType_Parse(const ::std::string& name,
      ShapeType* value) {
    return MatlabArray_ShapeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .drake.common.MatlabArray.ArrayType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::drake::common::MatlabArray_ArrayType type() const;
  inline void set_type(::drake::common::MatlabArray_ArrayType value);

  // optional int32 rows = 2;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 2;
  inline ::google::protobuf::int32 rows() const;
  inline void set_rows(::google::protobuf::int32 value);

  // optional int32 cols = 3;
  inline bool has_cols() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 3;
  inline ::google::protobuf::int32 cols() const;
  inline void set_cols(::google::protobuf::int32 value);

  // optional .drake.common.MatlabArray.ShapeType shape_type = 5;
  inline bool has_shape_type() const;
  inline void clear_shape_type();
  static const int kShapeTypeFieldNumber = 5;
  inline ::drake::common::MatlabArray_ShapeType shape_type() const;
  inline void set_shape_type(::drake::common::MatlabArray_ShapeType value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:drake.common.MatlabArray)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_cols();
  inline void clear_has_cols();
  inline void set_has_shape_type();
  inline void clear_has_shape_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  int shape_type_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_common_2fproto_2fmatlab_5frpc_2eproto();
  friend void protobuf_AssignDesc_common_2fproto_2fmatlab_5frpc_2eproto();
  friend void protobuf_ShutdownFile_common_2fproto_2fmatlab_5frpc_2eproto();

  void InitAsDefaultInstance();
  static MatlabArray* default_instance_;
};
// -------------------------------------------------------------------

class MatlabRPC : public ::google::protobuf::Message {
 public:
  MatlabRPC();
  virtual ~MatlabRPC();

  MatlabRPC(const MatlabRPC& from);

  inline MatlabRPC& operator=(const MatlabRPC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatlabRPC& default_instance();

  void Swap(MatlabRPC* other);

  // implements Message ----------------------------------------------

  MatlabRPC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatlabRPC& from);
  void MergeFrom(const MatlabRPC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 lhs = 1;
  inline int lhs_size() const;
  inline void clear_lhs();
  static const int kLhsFieldNumber = 1;
  inline ::google::protobuf::int64 lhs(int index) const;
  inline void set_lhs(int index, ::google::protobuf::int64 value);
  inline void add_lhs(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      lhs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_lhs();

  // repeated .drake.common.MatlabArray rhs = 2;
  inline int rhs_size() const;
  inline void clear_rhs();
  static const int kRhsFieldNumber = 2;
  inline const ::drake::common::MatlabArray& rhs(int index) const;
  inline ::drake::common::MatlabArray* mutable_rhs(int index);
  inline ::drake::common::MatlabArray* add_rhs();
  inline const ::google::protobuf::RepeatedPtrField< ::drake::common::MatlabArray >&
      rhs() const;
  inline ::google::protobuf::RepeatedPtrField< ::drake::common::MatlabArray >*
      mutable_rhs();

  // optional string function_name = 3;
  inline bool has_function_name() const;
  inline void clear_function_name();
  static const int kFunctionNameFieldNumber = 3;
  inline const ::std::string& function_name() const;
  inline void set_function_name(const ::std::string& value);
  inline void set_function_name(const char* value);
  inline void set_function_name(const char* value, size_t size);
  inline ::std::string* mutable_function_name();
  inline ::std::string* release_function_name();
  inline void set_allocated_function_name(::std::string* function_name);

  // @@protoc_insertion_point(class_scope:drake.common.MatlabRPC)
 private:
  inline void set_has_function_name();
  inline void clear_has_function_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > lhs_;
  ::google::protobuf::RepeatedPtrField< ::drake::common::MatlabArray > rhs_;
  ::std::string* function_name_;
  friend void  protobuf_AddDesc_common_2fproto_2fmatlab_5frpc_2eproto();
  friend void protobuf_AssignDesc_common_2fproto_2fmatlab_5frpc_2eproto();
  friend void protobuf_ShutdownFile_common_2fproto_2fmatlab_5frpc_2eproto();

  void InitAsDefaultInstance();
  static MatlabRPC* default_instance_;
};
// ===================================================================


// ===================================================================

// MatlabArray

// optional .drake.common.MatlabArray.ArrayType type = 1;
inline bool MatlabArray::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatlabArray::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatlabArray::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatlabArray::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::drake::common::MatlabArray_ArrayType MatlabArray::type() const {
  // @@protoc_insertion_point(field_get:drake.common.MatlabArray.type)
  return static_cast< ::drake::common::MatlabArray_ArrayType >(type_);
}
inline void MatlabArray::set_type(::drake::common::MatlabArray_ArrayType value) {
  assert(::drake::common::MatlabArray_ArrayType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:drake.common.MatlabArray.type)
}

// optional int32 rows = 2;
inline bool MatlabArray::has_rows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatlabArray::set_has_rows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatlabArray::clear_has_rows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatlabArray::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
inline ::google::protobuf::int32 MatlabArray::rows() const {
  // @@protoc_insertion_point(field_get:drake.common.MatlabArray.rows)
  return rows_;
}
inline void MatlabArray::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:drake.common.MatlabArray.rows)
}

// optional int32 cols = 3;
inline bool MatlabArray::has_cols() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatlabArray::set_has_cols() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatlabArray::clear_has_cols() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatlabArray::clear_cols() {
  cols_ = 0;
  clear_has_cols();
}
inline ::google::protobuf::int32 MatlabArray::cols() const {
  // @@protoc_insertion_point(field_get:drake.common.MatlabArray.cols)
  return cols_;
}
inline void MatlabArray::set_cols(::google::protobuf::int32 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:drake.common.MatlabArray.cols)
}

// optional .drake.common.MatlabArray.ShapeType shape_type = 5;
inline bool MatlabArray::has_shape_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatlabArray::set_has_shape_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatlabArray::clear_has_shape_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatlabArray::clear_shape_type() {
  shape_type_ = 0;
  clear_has_shape_type();
}
inline ::drake::common::MatlabArray_ShapeType MatlabArray::shape_type() const {
  // @@protoc_insertion_point(field_get:drake.common.MatlabArray.shape_type)
  return static_cast< ::drake::common::MatlabArray_ShapeType >(shape_type_);
}
inline void MatlabArray::set_shape_type(::drake::common::MatlabArray_ShapeType value) {
  assert(::drake::common::MatlabArray_ShapeType_IsValid(value));
  set_has_shape_type();
  shape_type_ = value;
  // @@protoc_insertion_point(field_set:drake.common.MatlabArray.shape_type)
}

// optional bytes data = 4;
inline bool MatlabArray::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatlabArray::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatlabArray::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatlabArray::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& MatlabArray::data() const {
  // @@protoc_insertion_point(field_get:drake.common.MatlabArray.data)
  return *data_;
}
inline void MatlabArray::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:drake.common.MatlabArray.data)
}
inline void MatlabArray::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:drake.common.MatlabArray.data)
}
inline void MatlabArray::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:drake.common.MatlabArray.data)
}
inline ::std::string* MatlabArray::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:drake.common.MatlabArray.data)
  return data_;
}
inline ::std::string* MatlabArray::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatlabArray::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:drake.common.MatlabArray.data)
}

// -------------------------------------------------------------------

// MatlabRPC

// repeated int64 lhs = 1;
inline int MatlabRPC::lhs_size() const {
  return lhs_.size();
}
inline void MatlabRPC::clear_lhs() {
  lhs_.Clear();
}
inline ::google::protobuf::int64 MatlabRPC::lhs(int index) const {
  // @@protoc_insertion_point(field_get:drake.common.MatlabRPC.lhs)
  return lhs_.Get(index);
}
inline void MatlabRPC::set_lhs(int index, ::google::protobuf::int64 value) {
  lhs_.Set(index, value);
  // @@protoc_insertion_point(field_set:drake.common.MatlabRPC.lhs)
}
inline void MatlabRPC::add_lhs(::google::protobuf::int64 value) {
  lhs_.Add(value);
  // @@protoc_insertion_point(field_add:drake.common.MatlabRPC.lhs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MatlabRPC::lhs() const {
  // @@protoc_insertion_point(field_list:drake.common.MatlabRPC.lhs)
  return lhs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MatlabRPC::mutable_lhs() {
  // @@protoc_insertion_point(field_mutable_list:drake.common.MatlabRPC.lhs)
  return &lhs_;
}

// repeated .drake.common.MatlabArray rhs = 2;
inline int MatlabRPC::rhs_size() const {
  return rhs_.size();
}
inline void MatlabRPC::clear_rhs() {
  rhs_.Clear();
}
inline const ::drake::common::MatlabArray& MatlabRPC::rhs(int index) const {
  // @@protoc_insertion_point(field_get:drake.common.MatlabRPC.rhs)
  return rhs_.Get(index);
}
inline ::drake::common::MatlabArray* MatlabRPC::mutable_rhs(int index) {
  // @@protoc_insertion_point(field_mutable:drake.common.MatlabRPC.rhs)
  return rhs_.Mutable(index);
}
inline ::drake::common::MatlabArray* MatlabRPC::add_rhs() {
  // @@protoc_insertion_point(field_add:drake.common.MatlabRPC.rhs)
  return rhs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::drake::common::MatlabArray >&
MatlabRPC::rhs() const {
  // @@protoc_insertion_point(field_list:drake.common.MatlabRPC.rhs)
  return rhs_;
}
inline ::google::protobuf::RepeatedPtrField< ::drake::common::MatlabArray >*
MatlabRPC::mutable_rhs() {
  // @@protoc_insertion_point(field_mutable_list:drake.common.MatlabRPC.rhs)
  return &rhs_;
}

// optional string function_name = 3;
inline bool MatlabRPC::has_function_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatlabRPC::set_has_function_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatlabRPC::clear_has_function_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatlabRPC::clear_function_name() {
  if (function_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_->clear();
  }
  clear_has_function_name();
}
inline const ::std::string& MatlabRPC::function_name() const {
  // @@protoc_insertion_point(field_get:drake.common.MatlabRPC.function_name)
  return *function_name_;
}
inline void MatlabRPC::set_function_name(const ::std::string& value) {
  set_has_function_name();
  if (function_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(value);
  // @@protoc_insertion_point(field_set:drake.common.MatlabRPC.function_name)
}
inline void MatlabRPC::set_function_name(const char* value) {
  set_has_function_name();
  if (function_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:drake.common.MatlabRPC.function_name)
}
inline void MatlabRPC::set_function_name(const char* value, size_t size) {
  set_has_function_name();
  if (function_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:drake.common.MatlabRPC.function_name)
}
inline ::std::string* MatlabRPC::mutable_function_name() {
  set_has_function_name();
  if (function_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:drake.common.MatlabRPC.function_name)
  return function_name_;
}
inline ::std::string* MatlabRPC::release_function_name() {
  clear_has_function_name();
  if (function_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_name_;
    function_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatlabRPC::set_allocated_function_name(::std::string* function_name) {
  if (function_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_name_;
  }
  if (function_name) {
    set_has_function_name();
    function_name_ = function_name;
  } else {
    clear_has_function_name();
    function_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:drake.common.MatlabRPC.function_name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace drake

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::drake::common::MatlabArray_ArrayType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::drake::common::MatlabArray_ArrayType>() {
  return ::drake::common::MatlabArray_ArrayType_descriptor();
}
template <> struct is_proto_enum< ::drake::common::MatlabArray_ShapeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::drake::common::MatlabArray_ShapeType>() {
  return ::drake::common::MatlabArray_ShapeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fproto_2fmatlab_5frpc_2eproto__INCLUDED
