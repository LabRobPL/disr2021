// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attic/multibody/alias_groups.proto

#ifndef PROTOBUF_attic_2fmultibody_2falias_5fgroups_2eproto__INCLUDED
#define PROTOBUF_attic_2fmultibody_2falias_5fgroups_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace drake {
namespace rigid_body_tree {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_attic_2fmultibody_2falias_5fgroups_2eproto();
void protobuf_AssignDesc_attic_2fmultibody_2falias_5fgroups_2eproto();
void protobuf_ShutdownFile_attic_2fmultibody_2falias_5fgroups_2eproto();

class AliasGroup;
class AliasGroups;

// ===================================================================

class AliasGroup : public ::google::protobuf::Message {
 public:
  AliasGroup();
  virtual ~AliasGroup();

  AliasGroup(const AliasGroup& from);

  inline AliasGroup& operator=(const AliasGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AliasGroup& default_instance();

  void Swap(AliasGroup* other);

  // implements Message ----------------------------------------------

  AliasGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AliasGroup& from);
  void MergeFrom(const AliasGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string member = 2;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::std::string& member(int index) const;
  inline ::std::string* mutable_member(int index);
  inline void set_member(int index, const ::std::string& value);
  inline void set_member(int index, const char* value);
  inline void set_member(int index, const char* value, size_t size);
  inline ::std::string* add_member();
  inline void add_member(const ::std::string& value);
  inline void add_member(const char* value);
  inline void add_member(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& member() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_member();

  // @@protoc_insertion_point(class_scope:drake.rigid_body_tree.AliasGroup)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> member_;
  friend void  protobuf_AddDesc_attic_2fmultibody_2falias_5fgroups_2eproto();
  friend void protobuf_AssignDesc_attic_2fmultibody_2falias_5fgroups_2eproto();
  friend void protobuf_ShutdownFile_attic_2fmultibody_2falias_5fgroups_2eproto();

  void InitAsDefaultInstance();
  static AliasGroup* default_instance_;
};
// -------------------------------------------------------------------

class AliasGroups : public ::google::protobuf::Message {
 public:
  AliasGroups();
  virtual ~AliasGroups();

  AliasGroups(const AliasGroups& from);

  inline AliasGroups& operator=(const AliasGroups& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AliasGroups& default_instance();

  void Swap(AliasGroups* other);

  // implements Message ----------------------------------------------

  AliasGroups* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AliasGroups& from);
  void MergeFrom(const AliasGroups& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .drake.rigid_body_tree.AliasGroup joint_group = 1;
  inline int joint_group_size() const;
  inline void clear_joint_group();
  static const int kJointGroupFieldNumber = 1;
  inline const ::drake::rigid_body_tree::AliasGroup& joint_group(int index) const;
  inline ::drake::rigid_body_tree::AliasGroup* mutable_joint_group(int index);
  inline ::drake::rigid_body_tree::AliasGroup* add_joint_group();
  inline const ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >&
      joint_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >*
      mutable_joint_group();

  // repeated .drake.rigid_body_tree.AliasGroup body_group = 2;
  inline int body_group_size() const;
  inline void clear_body_group();
  static const int kBodyGroupFieldNumber = 2;
  inline const ::drake::rigid_body_tree::AliasGroup& body_group(int index) const;
  inline ::drake::rigid_body_tree::AliasGroup* mutable_body_group(int index);
  inline ::drake::rigid_body_tree::AliasGroup* add_body_group();
  inline const ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >&
      body_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >*
      mutable_body_group();

  // @@protoc_insertion_point(class_scope:drake.rigid_body_tree.AliasGroups)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup > joint_group_;
  ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup > body_group_;
  friend void  protobuf_AddDesc_attic_2fmultibody_2falias_5fgroups_2eproto();
  friend void protobuf_AssignDesc_attic_2fmultibody_2falias_5fgroups_2eproto();
  friend void protobuf_ShutdownFile_attic_2fmultibody_2falias_5fgroups_2eproto();

  void InitAsDefaultInstance();
  static AliasGroups* default_instance_;
};
// ===================================================================


// ===================================================================

// AliasGroup

// optional string name = 1;
inline bool AliasGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AliasGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AliasGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AliasGroup::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AliasGroup::name() const {
  // @@protoc_insertion_point(field_get:drake.rigid_body_tree.AliasGroup.name)
  return *name_;
}
inline void AliasGroup::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:drake.rigid_body_tree.AliasGroup.name)
}
inline void AliasGroup::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:drake.rigid_body_tree.AliasGroup.name)
}
inline void AliasGroup::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:drake.rigid_body_tree.AliasGroup.name)
}
inline ::std::string* AliasGroup::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:drake.rigid_body_tree.AliasGroup.name)
  return name_;
}
inline ::std::string* AliasGroup::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AliasGroup::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:drake.rigid_body_tree.AliasGroup.name)
}

// repeated string member = 2;
inline int AliasGroup::member_size() const {
  return member_.size();
}
inline void AliasGroup::clear_member() {
  member_.Clear();
}
inline const ::std::string& AliasGroup::member(int index) const {
  // @@protoc_insertion_point(field_get:drake.rigid_body_tree.AliasGroup.member)
  return member_.Get(index);
}
inline ::std::string* AliasGroup::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:drake.rigid_body_tree.AliasGroup.member)
  return member_.Mutable(index);
}
inline void AliasGroup::set_member(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:drake.rigid_body_tree.AliasGroup.member)
  member_.Mutable(index)->assign(value);
}
inline void AliasGroup::set_member(int index, const char* value) {
  member_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:drake.rigid_body_tree.AliasGroup.member)
}
inline void AliasGroup::set_member(int index, const char* value, size_t size) {
  member_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:drake.rigid_body_tree.AliasGroup.member)
}
inline ::std::string* AliasGroup::add_member() {
  return member_.Add();
}
inline void AliasGroup::add_member(const ::std::string& value) {
  member_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:drake.rigid_body_tree.AliasGroup.member)
}
inline void AliasGroup::add_member(const char* value) {
  member_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:drake.rigid_body_tree.AliasGroup.member)
}
inline void AliasGroup::add_member(const char* value, size_t size) {
  member_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:drake.rigid_body_tree.AliasGroup.member)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AliasGroup::member() const {
  // @@protoc_insertion_point(field_list:drake.rigid_body_tree.AliasGroup.member)
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AliasGroup::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:drake.rigid_body_tree.AliasGroup.member)
  return &member_;
}

// -------------------------------------------------------------------

// AliasGroups

// repeated .drake.rigid_body_tree.AliasGroup joint_group = 1;
inline int AliasGroups::joint_group_size() const {
  return joint_group_.size();
}
inline void AliasGroups::clear_joint_group() {
  joint_group_.Clear();
}
inline const ::drake::rigid_body_tree::AliasGroup& AliasGroups::joint_group(int index) const {
  // @@protoc_insertion_point(field_get:drake.rigid_body_tree.AliasGroups.joint_group)
  return joint_group_.Get(index);
}
inline ::drake::rigid_body_tree::AliasGroup* AliasGroups::mutable_joint_group(int index) {
  // @@protoc_insertion_point(field_mutable:drake.rigid_body_tree.AliasGroups.joint_group)
  return joint_group_.Mutable(index);
}
inline ::drake::rigid_body_tree::AliasGroup* AliasGroups::add_joint_group() {
  // @@protoc_insertion_point(field_add:drake.rigid_body_tree.AliasGroups.joint_group)
  return joint_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >&
AliasGroups::joint_group() const {
  // @@protoc_insertion_point(field_list:drake.rigid_body_tree.AliasGroups.joint_group)
  return joint_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >*
AliasGroups::mutable_joint_group() {
  // @@protoc_insertion_point(field_mutable_list:drake.rigid_body_tree.AliasGroups.joint_group)
  return &joint_group_;
}

// repeated .drake.rigid_body_tree.AliasGroup body_group = 2;
inline int AliasGroups::body_group_size() const {
  return body_group_.size();
}
inline void AliasGroups::clear_body_group() {
  body_group_.Clear();
}
inline const ::drake::rigid_body_tree::AliasGroup& AliasGroups::body_group(int index) const {
  // @@protoc_insertion_point(field_get:drake.rigid_body_tree.AliasGroups.body_group)
  return body_group_.Get(index);
}
inline ::drake::rigid_body_tree::AliasGroup* AliasGroups::mutable_body_group(int index) {
  // @@protoc_insertion_point(field_mutable:drake.rigid_body_tree.AliasGroups.body_group)
  return body_group_.Mutable(index);
}
inline ::drake::rigid_body_tree::AliasGroup* AliasGroups::add_body_group() {
  // @@protoc_insertion_point(field_add:drake.rigid_body_tree.AliasGroups.body_group)
  return body_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >&
AliasGroups::body_group() const {
  // @@protoc_insertion_point(field_list:drake.rigid_body_tree.AliasGroups.body_group)
  return body_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >*
AliasGroups::mutable_body_group() {
  // @@protoc_insertion_point(field_mutable_list:drake.rigid_body_tree.AliasGroups.body_group)
  return &body_group_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rigid_body_tree
}  // namespace drake

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_attic_2fmultibody_2falias_5fgroups_2eproto__INCLUDED
